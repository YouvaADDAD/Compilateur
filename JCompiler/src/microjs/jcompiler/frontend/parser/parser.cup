package microjs.jcompiler.frontend.parser;

import java.util.List;
import java.util.LinkedList;

import java_cup.runtime.*;
import microjs.jcompiler.frontend.lexer.Lexer;
import microjs.jcompiler.frontend.ast.*;

parser code {: public Prog resultat = null; :}

terminal SEMICOL, VAR, LET, EQ,LT,GT,LE,GE,NE,
         LPAREN, RPAREN, LCURLY, RCURLY,
         LBRACKET, RBRACKET, IF, ELSE, COMMA, FUNCTION, LAMBDA,
         PLUS, MINUS, TIMES, DIV, RETURN, EQEQ,
         UMINUS, MOD;

terminal WHILE,SWAP,WHEN;
terminal READINT,PRINT;
terminal CONS,CAR,CDR;
terminal NIL;
terminal String IDENTIFIER;
terminal Integer INT;
terminal Boolean BOOL;

non terminal Symbol program;
non terminal List<Statement> statements;
non terminal Statement statement, opened_statement, closed_statement;
non terminal Expr expr;
non terminal Statement function;
non terminal List<Statement> block;
non terminal List<String> parameters;
non terminal List<Expr> arguments;

non terminal Expr pair;
non terminal Expr readPair;
non terminal Statement multAffect;

precedence left EQEQ,LT,GT,GE,LE,NE;
precedence left PLUS, MINUS;
precedence left TIMES, DIV, MOD;
precedence left UMINUS;

program ::=
	{:
	   resultat = new Prog("", new LinkedList<Statement>(), null, null);
	   RESULT   = null;
	:}
  | statements:prog
	{:
	   resultat = new Prog("", prog, progxleft, progxright);
	   RESULT   = null;
	:}
;
  
statements ::=		/***** pas de vide *****/
    statement:st
	{:
	   LinkedList<Statement> tmp = new LinkedList<Statement>();

	   if (st != null) {
	      tmp.add(st);
	   }
	   RESULT = tmp;
	:}
 | statement:st  statements:sts
	{:
           if (st != null) {
	      ((LinkedList<Statement>) sts).addFirst(st);
	   }
	   RESULT = sts;
	:}
  | LET:l  IDENTIFIER:var  EQ  expr:e  SEMICOL
	{:
	   LinkedList<Statement> tmp = new LinkedList<Statement>();

	   tmp.add(new Let(var, e, new LinkedList<Statement>(),
			    lxleft, exright));
	   RESULT = tmp;
	:}
  | LET:l  IDENTIFIER:var  EQ  expr:e  SEMICOL statements:sts
	{:
	   LinkedList<Statement> tmp = new LinkedList<Statement>();

	   tmp.add(new Let(var, e, sts, lxleft, stsxright));
	   RESULT = tmp;
	:}
	|LET:l LBRACKET IDENTIFIER:var1 COMMA IDENTIFIER:var2 RBRACKET EQ pair:p SEMICOL
		{:
		  LinkedList<Statement> tmp = new LinkedList<Statement>();
			tmp.add(new MultAffect2(var1,var2,p,new LinkedList<Statement>(),lxleft,pxright));
      RESULT = tmp;
		:}
	|LET:l LBRACKET IDENTIFIER:var1 COMMA IDENTIFIER:var2 RBRACKET EQ pair:p SEMICOL statements:sts 
		{:
		  LinkedList<Statement> tmp = new LinkedList<Statement>();
	    tmp.add(new MultAffect2(var1,var2,p,sts,lxleft,stsxright));
      RESULT = tmp;
		:}
	|LET:l LBRACKET IDENTIFIER:var1 COMMA IDENTIFIER:var2 RBRACKET EQ IDENTIFIER:p SEMICOL
		{:
		  LinkedList<Statement> tmp = new LinkedList<Statement>();
			tmp.add(new MultAffect2P(var1,var2,p,new LinkedList<Statement>(),lxleft,pxright));
      RESULT = tmp;
		:}
	|LET:l LBRACKET IDENTIFIER:var1 COMMA IDENTIFIER:var2 RBRACKET EQ IDENTIFIER:p SEMICOL statements:sts 
		{:
		  LinkedList<Statement> tmp = new LinkedList<Statement>();
	    tmp.add(new MultAffect2P(var1,var2,p,sts,lxleft,stsxright));
      RESULT = tmp;
		:}
;


statement ::=
    SEMICOL
	{:
	   RESULT = null;
	:}
  | opened_statement:ost  SEMICOL
	{:
	   RESULT = ost;
	:}
  | closed_statement:cst
	{:
	   RESULT = cst;
	:}
;


opened_statement ::=
    IDENTIFIER:id  EQ  expr:e
	{:
	   RESULT = new Assign(id, e, idxleft, exright);
	:}
  | VAR:v  IDENTIFIER:var  EQ  expr:e
	{:
	   RESULT = new Var(var, e, vxleft, exright);
	:}
  | expr:e
	{:
	   RESULT = new VoidExpr(e, exleft, exright);
	:}
  | RETURN:r expr:e
	{:
	   RESULT = new Return(e, rxleft, exright);
	:}
	| IDENTIFIER:var1 SWAP:s IDENTIFIER:var2 
	{:
	  RESULT=new Swap(var1 ,var2 ,var1xleft,var2xright);
	:}
	|PRINT:p LPAREN expr :e RPAREN:r
	{:
	RESULT=new Print(e,pxleft,rxright);
	:}
	|multAffect :ml
	{:
     RESULT=ml;
	:}
	
;


closed_statement ::=
    IF:i  LPAREN  expr:cond  RPAREN  block:thens
	{:
	   RESULT = new If(cond,
			   thens,
			   new LinkedList<Statement>(),
			   ixleft, thensxright);
	:}
  | IF:i  LPAREN  expr:cond  RPAREN  block:thens  ELSE  block:elses
	{:
	   RESULT = new If(cond, thens, elses, ixleft, elsesxright);
	:}
	| WHEN:i  LPAREN  expr:cond  RPAREN  block:corps
	{:
	   RESULT = new When(cond, corps,ixleft, corpsxright);
	:}
	|WHILE:i LPAREN  expr:cond  RPAREN  block:corps
	{:
	   RESULT = new While(cond,corps, ixleft, corpsxright);
	:}
  | function:f
	{:
	   RESULT = f;
	:}
;


function ::=
    FUNCTION:f  IDENTIFIER:id  LPAREN  RPAREN  block:body
	{:
	   RESULT = new Function(id, new LinkedList<String>(),
                                 body, fxleft, bodyxright);
	:}
  | FUNCTION:f  IDENTIFIER:id  LPAREN  parameters:params  RPAREN  block:body
	{:
	   RESULT = new Function(id, params, body, fxleft, bodyxright);
	:}
;


block ::=
    LCURLY  RCURLY
	{:
	   RESULT = new LinkedList<Statement>();
	:}
  | LCURLY  statements:sts  RCURLY
	{:
	   RESULT = sts;
	:}
;


parameters ::=		/***** pas de vide () ou de (...;;;...) *****/
    IDENTIFIER:id
	{:
	   LinkedList<String> tempList = new LinkedList<String>();
	   tempList.add(id);
	   RESULT = tempList;
	:}
  | parameters:params  COMMA  IDENTIFIER:id
	{:
	   ((LinkedList<String>)params).add(id);
	   RESULT = params;
	:}
;


expr ::=
    INT:n
	{:
	   RESULT = new IntConst(n, nxleft, nxright);
	:}
  | BOOL:b
	{:
	   RESULT = new BoolConst(b, bxleft, bxright);
	:}
	|NIL :n
	{:
	   RESULT=new Nil(nxleft,nxright);
	:}
  | expr:fun  LPAREN:l  RPAREN:r
	{:
	   RESULT = new Funcall(fun, new LinkedList<Expr>(),
                                funxleft, rxright);
	:}
  | expr:fun  LPAREN  arguments:args  RPAREN
	{:
	   RESULT = new Funcall(fun, args, funxleft, argsxright);
	:}
  | LAMBDA:l  LPAREN  parameters:params  RPAREN  block:body
	{:
	   RESULT = new Lambda(params, body, lxleft, bodyxright);
	:} 
  | IDENTIFIER:var
	{:
	   RESULT = new EVar(var, varxleft, varxright);
	:}
  | expr:l  PLUS  expr:r
	{:
	   RESULT = new BinOp("+", l, r, lxleft, rxright);
	:}
  | expr:l  MINUS  expr:r
	{:
	   RESULT = new BinOp("-", l, r, lxleft, rxright);
	:}
  | expr:l  TIMES  expr:r
	{:
	   RESULT = new BinOp("*", l, r, lxleft, rxright);
	:}
  | expr:l  DIV  expr:r
	{:
	   RESULT = new BinOp("/", l, r, lxleft, rxright);
	:}
  | expr:l  EQEQ  expr:r
	{:
	   RESULT = new BinOp("==", l, r, lxleft, rxright);
	:}
	| expr:l  LT  expr:r
	{:
	   RESULT = new BinOp("<", l, r, lxleft, rxright);
	:}
	| expr:l  LE  expr:r
	{:
	   RESULT = new BinOp("<=", l, r, lxleft, rxright);
	:}
	| expr:l  GT  expr:r
	{:
	   RESULT = new BinOp(">", l, r, lxleft, rxright);
	:}
	| expr:l  GE  expr:r
	{:
	   RESULT = new BinOp(">=", l, r, lxleft, rxright);
	:}
	| expr:l  NE  expr:r
	{:
	   RESULT = new BinOp("!=", l, r, lxleft, rxright);
	:}
  | LPAREN  expr:e  RPAREN
	{:
	   RESULT = e;
	:}
	|READINT :r LPAREN RPAREN:rp
	{:
   RESULT=new ReadInt(rxleft,rpxright);
	:}
	|pair : l
	{:
		RESULT =l ;
	:}
	|readPair : r
	{:
	  RESULT=r;
	:}
;

arguments ::=		/***** pas de vide () ou de (...,,,...) *****/
    expr:e
	{:
	   LinkedList<Expr> tempList = new LinkedList<Expr>();
	   tempList.add(e);
	   RESULT = tempList;
	:}
  | arguments:args  COMMA  expr:e
	{:
	   ((LinkedList<Expr>)args).add(e);
	   RESULT = args;
	:}
;
pair ::= 
  CONS:c LPAREN expr:a COMMA expr:b RPAREN:r
	{:
    RESULT = new Cons(a,b,cxleft,rxright);
	:}
	|LBRACKET:l expr:a COMMA expr:b RBRACKET:r
	{:
	RESULT = new Cons(a,b,lxleft,rxright);
	:}
;
readPair ::=
   CAR:c LPAREN pair:p RPAREN:r
	 {:
	 RESULT=new Car(p,cxleft,rxleft);
	 :}
	 |CAR:c LPAREN IDENTIFIER:v RPAREN:r
	 {:
	 RESULT=new Car2(v,cxleft,rxleft);
	 :}
	 |CDR:c LPAREN pair:p RPAREN:r
	 {:
	 RESULT=new Cdr(p,cxleft,rxleft);
	 :}
	 |CDR:c LPAREN IDENTIFIER:v RPAREN:r
	 {:
	 RESULT=new Cdr2(v,cxleft,rxleft);
	 :}
;
multAffect ::=
    VAR:v LBRACKET IDENTIFIER:var1 COMMA IDENTIFIER:var2 RBRACKET EQ pair:p
		{:
      RESULT = new MultAffect1(var1,var2,p,vxleft,pxright);
		 :}
		|VAR:v LBRACKET IDENTIFIER:var1 COMMA IDENTIFIER:var2 RBRACKET EQ IDENTIFIER:id
		{:
      RESULT = new MultAffect1P(var1,var2,id,vxleft,idxright);
		:}
;
